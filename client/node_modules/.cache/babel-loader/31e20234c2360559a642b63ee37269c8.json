{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar parser = require('engine.io-parser');\n\nvar Emitter = require('component-emitter');\n/**\r\n * Module exports.\r\n */\n\n\nmodule.exports = Transport;\n/**\r\n * Transport abstract constructor.\r\n *\r\n * @param {Object} options.\r\n * @api private\r\n */\n\nfunction Transport(opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR; // SSL options for Node.js client\n\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode; // results of ReactNative environment detection\n\n  this.isReactNative = opts.isReactNative; // other options for Node.js client\n\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n/**\r\n * Mix in `Emitter`.\r\n */\n\n\nEmitter(Transport.prototype);\n/**\r\n * Emits an error.\r\n *\r\n * @param {String} str\r\n * @return {Transport} for chaining\r\n * @api public\r\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n/**\r\n * Opens the transport.\r\n *\r\n * @api public\r\n */\n\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n/**\r\n * Closes the transport.\r\n *\r\n * @api private\r\n */\n\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n/**\r\n * Sends multiple packets.\r\n *\r\n * @param {Array} packets\r\n * @api private\r\n */\n\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n/**\r\n * Called upon open\r\n *\r\n * @api private\r\n */\n\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n/**\r\n * Called with data.\r\n *\r\n * @param {String} data\r\n * @api private\r\n */\n\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n/**\r\n * Called with a decoded packet.\r\n */\n\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n/**\r\n * Called upon close.\r\n *\r\n * @api private\r\n */\n\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};","map":null,"metadata":{},"sourceType":"script"}